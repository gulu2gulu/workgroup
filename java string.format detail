JDK1.5中，String类新增了一个很有用的静态方法String.format()：
format(Locale l, String format, Object... args) 使用指定的语言环境、格式字符串和参数返回一个格式化字符串。
format(String format, Object... args) 使用指定的格式字符串和参数返回一个格式化字符串。
1.对整数进行格式化：%[index$][标识][最小宽度]转换方式。
我们可以看到，格式化字符串由4部分组成，其中%[index$]的含义我们上面已经讲过，[最小宽度]的含义也很好理解，就是最终该整数转化的字符串最少包含多少位数字。我们来看看剩下2个部分的含义吧：
标  识：
'-' 在最小宽度内左对齐，不可以与“用0填充”同时使用
'#' 只适用于8进制和16进制，8进制时在结果前面增加一个0，16进制时在结果前面增加0x
'+' 结果总是包括一个符号（一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制）
' ' 正值前加空格，负值前加负号（一般情况下只适用于10进制，若对象为BigInteger才可以用于8进制和16进制）
'0' 结果将用零来填充
',' 只适用于10进制，每3位数字之间用“，”分隔
'(' 若参数是负数，则结果中不添加负号而是用圆括号把数字括起来（同‘+’具有同样的限制）
转换方式：
d-十进制 o-八进制 x或X-十六进制
上面的说明过于枯燥，我们来看几个具体的例子。需要特别注意的一点是：大部分标识字符可以同时使用。
        System.out.println(String.format("%1$,09d", -3123));  
        System.out.println(String.format("%1$9d", -31));  
        System.out.println(String.format("%1$-9d", -31));  
        System.out.println(String.format("%1$(9d", -31));  
        System.out.println(String.format("%1$#9x", 5689));  
 
//结果为：  
//-0003,123  
//      -31  
//-31        
//     (31)  
//   0x1639  
2.对浮点数进行格式化：%[index$][标识][最少宽度][.精度]转换方式
我们可以看到，浮点数的转换多了一个“精度”选项，可以控制小数点后面的位数。
标识：
'-' 在最小宽度内左对齐，不可以与“用0填充”同时使用
'+' 结果总是包括一个符号
' ' 正值前加空格，负值前加负号
'0' 结果将用零来填充
',' 每3位数字之间用“，”分隔（只适用于fgG的转换）
'(' 若参数是负数，则结果中不添加负号而是用圆括号把数字括起来（只适用于eEfgG的转换）
转换方式：
'e', 'E' -- 结果被格式化为用计算机科学记数法表示的十进制数
'f' -- 结果被格式化为十进制普通表示方式
'g', 'G' -- 根据具体情况，自动选择用普通表示方式还是科学计数法方式
'a', 'A' -- 结果被格式化为带有效位数和指数的十六进制浮点数
3.对字符进行格式化：
对字符进行格式化是非常简单的，c表示字符，标识中'-'表示左对齐，其他就没什么了。
4.对百分比符号进行格式化：
看了上面的说明，大家会发现百分比符号“%”是特殊格式的一个前缀。那么我们要输入一个百分比符号该怎么办呢？肯定是需要转义字符的,但是要注意的是，在这里转义字符不是“\”，而是“%”。换句话说，下面这条语句可以输出一个“12%”：
System.out.println(String.format("%1$d%%", 12)); 
5.取得平台独立的行分隔符：
System.getProperty("line.separator")可以取得平台独立的行分隔符，但是用在format中间未免显得过于烦琐了。于是format函数自带了一个平台独立的行分隔符那就是String.format("%n")。
6.对日期类型进行格式化：
以下日期和时间转换的后缀字符是为 't' 和 'T' 转换定义的。这些类型相似于但不完全等同于那些由 GNU date 和 POSIX strftime(3c) 定义的类型。提供其他转换类型是为了访问特定于 Java 的功能（如将 'L' 用作秒中的毫秒）。
举几个这个方法实用的例子(注释是输出结果)：
CODE:
long now = System.currentTimeMillis();

String s = String.format("%tR", now);   // "15:12"

CODE:
// Current month/day/year

Date d = new Date(now);

s = String.format("%tD", d);                // "07/13/04"

CODE:
s = String.format("%,d", Integer.MAX_VALUE); // "2,147,483,647"

CODE:
s = String.format("%05d", 123);              // "00123"

是不是很方便，让人动心啊？哈哈，还有更多的效果!
其实format函数有些类似C语言中printf函数，一些格式字符串与 C 类似，但已进行了某些定制，以适应 Java语言，并且利用了其中一些特性。此方法提供了对布局对齐和排列的支持，以及对数值、字符串和日期/时间数据的常规格式和特定于语言环境的输出的支持。支持诸如 byte、BigDecimal 和 Calendar 等常见 Java 类型。
产生格式化输出的每个方法都需要格式字符串 和参数列表。格式字符串是一个 String，它可以包含固定文本以及一个或多个嵌入的格式说明符。请考虑以下示例：
Calendar c = ...;  
 
String s = String.format("Duke's Birthday: %1$tm %1$te,%1$tY", c);  
格式字符串是 format 方法的第一个参数。它包含三个格式说明符 "%1$tm"、"%1$te" 和"%1$tY"，它们指出应该如何处理参数以及在文本的什么地方插入它们。格式字符串的其余部分是包括 "Dukes Birthday: "和其他任何空格或标点符号的固定文本。 参数列表由传递给位于格式字符串之后的方法的所有参数组成。在上述示例中，参数列表的大小为 1，由新对象Calendar 组成。
1.常规类型、字符类型和数值类型的格式说明符的语法如下：
%[argument_index$][flags][width][.precision]conversion 
可选的 argument_index 是一个十进制整数，用于表明参数在参数列表中的位置。第一个参数由 "1$" 引用，第二个参数由 "2$" 引用，依此类推。
可选的 flags 是修改输出格式的字符集。有效标志的集合取决于转换类型。
可选 width 是一个非负十进制整数，表明要向输出中写入的最少字符数。
可选 precision 是一个非负十进制整数，通常用来限制字符数。特定行为取决于转换类型。
所需的 conversion 是一个表明应该如何格式化参数的字符。给定参数的有效转换集合取决于参数的数据类型。
2.用来表示日期和时间类型的格式说明符的语法如下：
%[argument_index$][flags][width]conversion 
可选的 argument_index、flags 和 width 的定义同上。
所需的 conversion 是一个由两字符组成的序列。第一个字符是 't' 或 'T'。第二个字符表明所使用的格式。这些字符类似于但不完全等同于那些由 GNU date 和 POSIX strftime(3c) 定义的字符。
3.与参数不对应的格式说明符的语法如下：
%[flags][width]conversion 
可选 flags 和 width 的定义同上。
所需的 conversion 是一个表明要在输出中所插内容的字符。
转  换
转换可分为以下几类：
1. 常规 - 可应用于任何参数类型
2.字符 - 可应用于表示 Unicode 字符的基本类型：char、Character、byte、Byte、short 和 Short。当Character.isValidCodePoint(int) 返回 true 时，可将此转换应用于 int 和 Integer 类型
3. 数值
1. 整数 - 可应用于 Java 的整数类型：byte、Byte、short、Short、int、Integer、long、Long 和 BigInteger
2. 浮点 - 可用于 Java 的浮点类型：float、Float、double、Double 和 BigDecimal
4. 日期/时间 - 可应用于 Java 的、能够对日期或时间进行编码的类型：long、Long、Calendar 和 Date。
5. 百分比 - 产生字面值 '%' ('"u0025')
6. 行分隔符 - 产生特定于平台的行分隔符
下表总结了受支持的转换。由大写字符（如 'B'、'H'、'S'、'C'、'X'、'E'、'G'、'A' 和'T'）表示的转换与由相应的小写字符的转换等同，根据流行的 Locale 规则将结果转换为大写形式除外。后者等同于String.toUpperCase() 的以下调用。
转换	参数类别	说明
'b', 'B'	常规	如果参数 arg 为 null，则结果为 "false"。如果 arg 是一个 boolean 值或Boolean，则结果为 String.valueOf() 返回的字符串。否则结果为 "true"。
'h', 'H'	常规	如果参数 arg 为 null，则结果为 "null"。否则，结果为调用 Integer.toHexString(arg.hashCode()) 得到的结果。
's', 'S'	常规	如果参数 arg 为 null，则结果为 "null"。如果 arg 实现 Formattable，则调用arg.formatTo。否则，结果为调用 arg.toString() 得到的结果。
'c', 'C'	字符	结果是一个 Unicode 字符
'd'	整数	结果被格式化为十进制整数
'o'	整数	结果被格式化为八进制整数
'x', 'X'	整数	结果被格式化为十六进制整数
'e', 'E'	浮点	结果被格式化为用计算机科学记数法表示的十进制数
'f'	浮点	结果被格式化为十进制数
'g', 'G'	浮点	根据精度和舍入运算后的值，使用计算机科学记数形式或十进制格式对结果进行格式化。
'a', 'A'	浮点	结果被格式化为带有效位数和指数的十六进制浮点数
't', 'T'	日期/时间	日期和时间转换字符的前缀。请参阅日期/时间转换。
'%'	百分比	结果为字面值 '%' ('"u0025')
'n'	行分隔符	结果为特定于平台的行分隔符
'H'	24 小时制的小时，被格式化为必要时带前导零的两位数，即 00 - 23。
'I'	12 小时制的小时，被格式化为必要时带前导零的两位数，即 01 - 12。
'k'	24 小时制的小时，即 0 - 23。
'l'	12 小时制的小时，即 1 - 12。
'M'	小时中的分钟，被格式化为必要时带前导零的两位数，即 00 - 59。
'S'	分钟中的秒，被格式化为必要时带前导零的两位数，即 00 - 60 （"60" 是支持闰秒所需的一个特殊值）。
'L'	秒中的毫秒，被格式化为必要时带前导零的三位数，即 000 - 999。
'N'	秒中的毫微秒，被格式化为必要时带前导零的九位数，即 000000000 - 999999999。
'p'	特定于语言环境的 上午或下午 标记以小写形式表示，例如 "am" 或 "pm"。使用转换前缀 'T' 可以强行将此输出转换为大写形式。
'z'	相对于 GMT 的 RFC 822 格式的数字时区偏移量，例如 -0800。
'Z'	表示时区缩写形式的字符串。Formatter 的语言环境将取代参数的语言环境（如果有）。
's'	自协调世界时 (UTC) 1970 年 1 月 1 日 00:00:00 至现在所经过的秒数，即 Long.MIN_VALUE/1000 与 Long.MAX_VALUE/1000 之间的差值。
'Q'	自协调世界时 (UTC) 1970 年 1 月 1 日 00:00:00 至现在所经过的毫秒数，即 Long.MIN_VALUE 与 Long.MAX_VALUE 之间的差值。
'B'	特定于语言环境的月份全称，例如 "January" 和 "February"。
'b'	特定于语言环境的月份简称，例如 "Jan" 和 "Feb"。
'h'	与 'b' 相同。
'A'	特定于语言环境的星期几全称，例如 "Sunday" 和 "Monday"
'a'	特定于语言环境的星期几简称，例如 "Sun" 和 "Mon"
'C'	除以 100 的四位数表示的年份，被格式化为必要时带前导零的两位数，即 00 - 99
'Y'	年份，被格式化为必要时带前导零的四位数（至少），例如，0092 等于格里高利历的 92 CE。
'y'	年份的最后两位数，被格式化为必要时带前导零的两位数，即 00 - 99。
'j'	一年中的天数，被格式化为必要时带前导零的三位数，例如，对于格里高利历是 001 - 366。
'm'	月份，被格式化为必要时带前导零的两位数，即 01 - 13。
'd'	一个月中的天数，被格式化为必要时带前导零两位数，即 01 - 31
'e'	一个月中的天数，被格式化为两位数，即 1 - 31。
'R'	24 小时制的时间，被格式化为 "%tH:%tM"
'T'	24 小时制的时间，被格式化为 "%tH:%tM:%tS"。
'r'	12 小时制的时间，被格式化为 "%tI:%tM:%tS %Tp"。上午或下午标记 ('%Tp') 的位置可能与语言环境有关。
'D'	日期，被格式化为 "%tm/%td/%ty"。
'F'	ISO 8601 格式的完整日期，被格式化为 "%tY-%tm-%td"。
'c'	日期和时间，被格式化为 "%ta %tb %td %tT %tZ %tY"，例如 "Sun Jul 20 16:17:00 EDT 1969"。
标志	常规	字符	整数	浮点	日期/时间	说明
'-'	y    	y    	y    	y    	y	结果将是左对齐的。
'#'	y1    	-    	y3    	y    	-    	结果应该使用依赖于转换类型的替换形式
'+'	-    	-    	y4    	y    	-    	结果总是包括一个符号
'   '	-    	-    	y4    	y    	-    	对于正值，结果中将包括一个前导空格
'0'	-    	-    	y    	y    	-    	结果将用零来填充
','	-    	-    	y2    	y5    	-    	结果将包括特定于语言环境的组分隔符
'('	-    	-    	y4    	y5    	-    	结果将是用圆括号括起来的负数
任何未明确定义为转换的字符都是非法字符，并且都被保留，以供将来扩展使用。
日期/时间转换
以下日期和时间转换的后缀字符是为 't' 和 'T' 转换定义的。这些类型相似于但不完全等同于那些由 GNU date 和 POSIXstrftime(3c) 定义的类型。提供其他转换类型是为了访问特定于 Java 的功能（如将 'L' 用作秒中的毫秒）。
以下转换字符用来格式化时间：
以下转换字符用来格式化日期：
以下转换字符用于格式化常见的日期/时间组合。
任何未明确定义为转换的字符都是非法字符，并且都被保留，以供将来扩展使用。
标  志
下表总结了受支持的标志。y 表示该标志受指示参数类型支持。
1 取决于 Formattable 的定义。
2 只适用于 'd' 转换。
3 只适用于 'o'、'x' 和 'X' 转换。
4 对 BigInteger 应用 'd'、'o'、'x' 和 'X' 转换时，或者对 byte 及 Byte、short 及 Short、int 及 Integer、long 及 Long 分别应用 'd' 转换时适用。
5 只适用于 'e'、'E'、'f'、'g' 和 'G' 转换。
任何未显式定义为标志的字符都是非法字符，并且都被保留，以供扩展使用。
宽度   宽度是将向输出中写入的最少字符数。对于行分隔符转换，不适用宽度，如果提供宽度，则会抛出异常。
精度   对于常规参数类型，精度是将向输出中写入的最多字符数。
对于浮点转换 'e'、'E' 和 'f'，精度是小数点分隔符后的位数。如果转换是 'g' 或 'G'，那么精度是舍入计算后所得数值的所有位数。如果转换是 'a' 或 'A'，则不必指定精度。
对于字符、整数和日期/时间参数类型转换，以及百分比和行分隔符转换，精度是不适用的；如果提供精度，则会抛出异常。
参数索引   参数索引是一个十进制整数，用于表明参数在参数列表中的位置。第一个参数由 "1$" 引用，第二个参数由 "2$" 引用，依此类推。
根据位置引用参数的另一种方法是使用 '<' ('"u003c') 标志，这将会重用以前格式说明符的参数。例如，以下两条语句产生的字符相同：
Calendar c = ...;  
String s1 = String.format("Duke's Birthday: %1$tm %1$te,%1$tY", c);  
 
String s2 = String.format("Duke's Birthday: %1$tm %<$te,%<$tY", c); 
常规类型的格式化
String类的format()方法用于创建格式化的字符串以及连接多个字符串对象。熟悉c语言的读者应该记得C语言的sprintf()方法，两者有类似之处。format()方法有两种重载形式。
l     format(String format, Object... args)
该方法使用指定的字符串格式和参数生成格式化的新字符串。 新字符串始终使用本地语言环境。例如当前日期信息在中国语言环境中的表现形式为“2007-10-27”，但是在其他国家有不同的表现形式。
语法：
String.format(format,args...)
format：字符串格式。
args...：字符串格式中由格式说明符引用的参数。如果还有格式说明符以外的参数，则忽略这些额外的参数。参数的数目是可变的，可以为0。
l     format(Locale locale, String format, Object... args)
该方法使用指定的语言环境、字符串格式和参数生成一个格式化的新字符串。新字符串始终使用指定的语言环境。
语法：
String.format(locale,format,args...)
locale：指定的语言环境。
format：字符串格式。
args...：字符串格式中由格式说明符引用的参数。如果还有格式说明符以外的参数，则忽略这些额外的参数。参数的数目是可变的，可以为0。
format()方法中的字符串格式参数有很多种转换符选项，例如：日期、整数、浮点数等。这些转换符的说明如表7.1所示。
表7.1                                  转换符
转  换  符
说    明 
示    例
%s
字符串类型
"mingrisoft"
%c
字符类型
'm'
%b
布尔类型
true
%d
整数类型（十进制）
99
%x
整数类型（十六进制）
FF
%o
整数类型（八进制）
77
%f
浮点类型
99.99
%a
十六进制浮点类型
FF.35AE
%e
指数类型
9.38e+5
%g
通用浮点类型（f和e类型中较短的）
 
%h
散列码
 
%%
百分比类型
％
%n
换行符
 
%tx
日期与时间类型（x代表不同的日期与时间转换符
 
*  ch0705实例位置：mr/07/sl/05
下面的实例使用了表7.1中的各种转换符实现不同数据类型到字符串的转换，并将转换后的字符串通过System.out.printf()方法输出到控制台中。实现步骤如下。
（1）创建StrConversion类，将下面这段代码复制到类定义中。
例程06  代码位置：光盘/mr/07/sl/05/src/com/lzw/StrConversion.java
public static void main(String[] args) {
    String str=null;
    str=String.format("Hi,%s", "飞龙");          // 格式化字符串
    System.out.println(str);                             // 输出字符串变量str的内容
    System.out.printf("字母a的大写是：%c %n", 'A');
    System.out.printf("3>7的结果是：%b %n", 3>7);
    System.out.printf("100的一半是：%d %n", 100/2);
    System.out.printf("100的16进制数是：%x %n", 100);
    System.out.printf("100的8进制数是：%o %n", 100);
    System.out.printf("50元的书打8.5折扣是：%f 元%n", 50*0.85);
    System.out.printf("上面价格的16进制数是：%a %n", 50*0.85);
    System.out.printf("上面价格的指数表示：%e %n", 50*0.85);
    System.out.printf("上面价格的指数和浮点数结果的长度较短的是：%g %n", 50*0.85);
    System.out.printf("上面的折扣是%d%% %n", 85);
    System.out.printf("字母A的散列码是：%h %n", 'A');
}
（2）运行StrConversion类，在控制台中输出的结果如下：
Hi,飞龙
字母a的大写是：A
3>7的结果是：false
100的一半是：50
100的16进制数是：64
100的8进制数是：144
50元的书打8.5折扣是：42.500000 元
上面价格的16进制数是：0x1.54p5
上面价格的指数表示：4.250000e+01
上面价格的指数和浮点数结果的长度较短的是：42.5000
上面的折扣是85%
字母A的散列码是：41
这些字符串格式参数不但可以灵活将其他数据类型转换成字符串，而且可以与各种标志组合在一起，生成各种格式的字符串，这些标志如表7.2所示。
表7.2                             搭配转换符的标志
标    志
说    明
示    例
结    果
+
为正数或者负数添加符号
("%+d",15)
+15
−
左对齐
("%-5d",15)
|15   |
0
数字前面补0
("%04d", 99)
0099
空格
在整数之前添加指定数量的空格
("% 4d", 99)
|  99|
,
以“,”对数字分组
("%,f", 9999.99)
9,999.990000
(
使用括号包含负数
("%(f", -99.99)
(99.990000)
#
如果是浮点数则包含小数点，如果是16进制或8进制则添加0x或0
("%#x", 99)
("%#o", 99)
0x63
0143
< 
格式化前一个转换符所描述的参数
("%f和%<3.2f", 99.45)
99.450000和99.45
$
被格式化的参数索引
("%1$d,%2$s", 99,"abc")
99,abc
*  ch0706实例位置：mr/07/sl/06
下面的实例使用几种常用的转换符组合标志实现字符串的格式化，并通过System.out.printf()方法输出到控制台中。实现步骤如下。
（1）创建StrDateTime类，将下面这段代码复制到类定义中。
例程07  代码位置：光盘/mr/07/sl/06/src/com/lzw/StrFormat.java
public static void main(String[] args) {
    String str=null;
    str=String.format("格式参数$的使用：%1$d,%2$s", 99,"abc");           // 格式化字符串
    System.out.println(str);                                                                                     // 输出字符串变量
    System.out.printf("显示正负数的符号：%+d与%d%n", 99,-99);
    System.out.printf("最牛的编号是：%03d%n", 7);
    System.out.printf("Tab键的效果是：% 8d%n", 7);
    System.out.printf("整数分组的效果是：%,d%n", 9989997);
    System.out.printf("一本书的价格是：%2.2f元%n", 49.8);
}
（2）运行StrFormat类，将在控制台输出字符串的格式化结果。
格式参数$的使用：99,abc
显示正负数的符号：+99与-99
最牛的编号是：007
Tab键的效果是：       7
整数分组的效果是：9,989,997
一本书的价格是：49.80元
7.4.2  日期和时间字符串格式化
在程序界面中经常需要显示时间和日期，但是其显示的 格式经常不尽人意，需要编写大量的代码经过各种算法才得到理想的日期与时间格式。字符串格式中还有%tx转换符没有详细介绍，它是专门用来格式化日期和时 间的。%tx转换符中的x代表另外的处理日期和时间格式的转换符，它们的组合能够将日期和时间格式化成多种格式。
1．常见日期时间格式化
格式化日期与时间的转换符定义了各种格式化日期字符串的方式，其中最常用的日期和时间的组合格式如表7.3所示。
表7.3                         常见日期和时间组合的格式
转  换  符
说    明
示    例
c
包括全部日期和时间信息
星期六 十月 27 14:21:20 CST 2007
F
“年-月-日”格式
2007-10-27
D
“月/日/年”格式
10/27/07
r
“HH:MM:SS PM”格式（12时制）
02:25:51 下午
T
“HH:MM:SS”格式（24时制）
14:28:16
R
“HH:MM”格式（24时制）
14:28
*  ch0707实例位置：mr/07/sl/07
下面的实例使用表7.3中的转换符格式化当前日期和时间，并通过System.out.printf()方法输出到控制台中。实现步骤如下。
（1）创建StrDateTime类，将下面这段代码复制到类定义中。
例程08  代码位置：光盘/mr/07/sl/07/src/com/lzw/StrDateTime.java
public static void main(String[] args) {
    Date date=new Date();                                                                    // 创建日期对象
    System.out.printf("全部日期和时间信息：%tc%n",date);                // 格式化输出日期或时间
    System.out.printf("年-月-日格式：%tF%n",date);
    System.out.printf("月/日/年格式：%tD%n",date);
    System.out.printf("HH:MM:SS PM格式（12时制）：%tr%n",date);
    System.out.printf("HH:MM:SS格式（24时制）：%tT%n",date);
    System.out.printf("HH:MM格式（24时制）：%tR",date);
}
（2）运行该实例，将在控制台输出本地时间格式的当前日期和时间。运行结果如下：
全部日期和时间信息：星期日十月28 13:53:24 CST 2007
年-月-日格式：2007-10-28
月/日/年格式：10/28/07
HH:MM:SS PM格式（12时制）：01:53:24 下午
HH:MM:SS格式（24时制）：13:53:24
HH:MM格式（24时制）：13:53
2．格式化日期字符串
定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。这些日期转换符如表7.4所示。
表7.4                             日期格式化转换符
转  换  符
说    明
示    例
b或者h
月份简称
中：十月
英：Oct
B
月份全称
中：十月
英：October
a
星期的简称
中：星期六
英：Sat
A
星期的全称
中：星期六
英：Saturday
C
年的前两位数字（不足两位前面补0）
20
y
年的后两位数字（不足两位前面补0）
07
Y
4位数字的年份（不足4位前面补0）
2007
j
一年中的天数（即年的第几天）
300
m
两位数字的月份（不足两位前面补0）
10
d
两位数字的日（不足两位前面补0）
27
e
月份的日（前面不补0）
5
*  ch0708实例位置：mr/07/sl/08
下面的实例将使用各种转换符格式化当前系统的日期，并通过System.out.printf()方法输出到控制台中。实现步骤如下。
（1）创建StrDate类，将下面这段代码复制到类定义中。
例程09  代码位置：光盘/mr/07/sl/08/src/com/lzw/StrDate.java
public static void main(String[] args) {
    Date date=new Date();                                                                             // 创建日期对象
    String str=String.format(Locale.US,"英文月份简称：%tb",date);      // 格式化日期字符串
    System.out.println(str);                                                                              // 输出字符串内容
    System.out.printf("本地月份简称：%tb%n",date);
    str=String.format(Locale.US,"英文月份全称：%tB",date);
    System.out.println(str);
    System.out.printf("本地月份全称：%tB%n",date);
    str=String.format(Locale.US,"英文星期的简称：%ta",date);
    System.out.println(str);
    System.out.printf("本地星期的简称：%tA%n",date);
    System.out.printf("年的前两位数字（不足两位前面补0）：%tC%n",date);
    System.out.printf("年的后两位数字（不足两位前面补0）：%ty%n",date);
    System.out.printf("一年中的天数（即年的第几天）：%tj%n",date);
    System.out.printf("两位数字的月份（不足两位前面补0）：%tm%n",date);
    System.out.printf("两位数字的日（不足两位前面补0）：%td%n",date);
    System.out.printf("月份的日（前面不补0）：%te",date);
}
（2）运行本实例，将在控制台输出各种日期格式化的字符串。运行结果如下：
英文月份简称：Oct
本地月份简称：十月
英文月份全称：October
本地月份全称：十月
英文星期的简称：Sun
本地星期的简称：星期日
年的前两位数字（不足两位前面补0）：20
年的后两位数字（不足两位前面补0）：07
一年中的天数（即年的第几天）：301
两位数字的月份（不足两位前面补0）：10
两位数字的日（不足两位前面补0）：28
月份的日（前面不补0）：28
3．格式化时间字符串
和日期格式转换符相比，时间格式的转换符要更多、更精确。它可以将时间格式化成时、分、秒甚至时毫秒等单位。格式化时间字符串的转换符如表7.5所示。
表7.5                             时间格式化转换符
转  换  符
说    明
示    例
H
2位数字24时制的小时（不足2位前面补0）
15
I
2位数字12时制的小时（不足2位前面补0）
03
k
2位数字24时制的小时（前面不补0）
15
l
2位数字12时制的小时（前面不补0）
3
M
2位数字的分钟（不足2位前面补0）
03
S
2位数字的秒（不足2位前面补0）
09
L
3位数字的毫秒（不足3位前面补0）
015
N
9位数字的毫秒数（不足9位前面补0）
562000000
p
小写字母的上午或下午标记
中：下午
英：pm
z
相对于GMT的RFC822时区的偏移量
+0800
Z
时区缩写字符串
CST
续表
转  换  符
说    明
示    例
s
1970-1-1 00:00:00 到现在所经过的秒数
1193468128
Q
1970-1-1 00:00:00 到现在所经过的毫秒数
1193468128984
*  ch0709实例位置：mr/07/sl/09
下面通过实例使用各种转换符格式化当前系统的时间，并通过System.out.printf()方法输出到控制台中。实现步骤如下。
（1）创建StrTime类，将下面这段代码复制到类定义中。
例程10  代码位置：光盘/mr/07/sl/08/src/com/lzw/StrTime.java
public static void main(String[] args) {
    Date date=new Date();                               // 创建日期对象
    System.out.printf("2位数字24时制的小时（不足2位前面补0）:%tH%n",date);
    System.out.printf("2位数字12时制的小时（不足2位前面补0）:%tI%n",date);
    System.out.printf("2位数字24时制的小时（前面不补0）:%tk%n",date);
    System.out.printf("2位数字12时制的小时（前面不补0）:%tl%n",date);
    System.out.printf("2位数字的分钟（不足2位前面补0）:%tM%n",date);
    System.out.printf("2位数字的秒（不足2位前面补0）:%tS%n",date);
    System.out.printf("3位数字的毫秒（不足3位前面补0）:%tL%n",date);
    System.out.printf("9位数字的毫秒数（不足9位前面补0）:%tN%n",date);
    String str=String.format(Locale.US,"小写字母的上午或下午标记(英)：%tp",date);
    System.out.println(str);                          // 输出字符串变量str的内容
    System.out.printf ("小写字母的上午或下午标记（中）：%tp%n",date);
    System.out.printf("相对于GMT的RFC822时区的偏移量:%tz%n",date);
    System.out.printf("时区缩写字符串:%tZ%n",date);
    System.out.printf("1970-1-1 00:00:00 到现在所经过的秒数：%ts%n",date);
    System.out.printf("1970-1-1 00:00:00 到现在所经过的毫秒数：%tQ%n",date);
}
（2）运行实例，在控制台将输出以下信息：
2位数字24时制的小时（不足2位前面补0）:15
2位数字12时制的小时（不足2位前面补0）:03
2位数字24时制的小时（前面不补0）:15
2位数字12时制的小时（前面不补0）:3
2位数字的分钟（不足2位前面补0）:24
2位数字的秒（不足2位前面补0）:56
3位数字的毫秒（不足3位前面补0）:828
9位数字的毫秒数（不足9位前面补0）:828000000
小写字母的上午或下午标记(英）：pm
小写字母的上午或下午标记（中）：下午
相对于GMT的RFC822时区的偏移量:+0800
时区缩写字符串:CST
1970-1-1 00:00:00到现在所经过的秒数：1193556296
1970-1-1 00:00:00到现在所经过的毫秒数：1193556296828
